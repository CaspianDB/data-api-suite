service: myApp

provider:
  name: aws
  runtime: nodejs10.x
  region: us-east-1
  environment:
    AWS_REGION: ${self:provider.region}
    DATA_API_SECRET_ARN: arn:aws:secretsmanager:us-east-1:123456789012:secret:my-app
    DATA_API_RESOURCE_ARN: arn:aws:rds:us-east-1:123456789012:cluster:my-app
    DATABASE_NAME: my-app
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "secretsmanager:GetSecretValue"
      Resource:
        - ${self:provider.environment.DATA_API_SECRET_ARN}
    - Effect: Allow
      Action:
        - "rds-data:*"
      Resource:
        - ${self:provider.environment.DATA_API_RESOURCE_ARN}

plugins:
  - serverless-plugin-typescript
  - ../packages/data-api-migrations-serverless/lib
  - ../packages/data-api-local-serverless/lib
  - serverless-offline

custom:
  data-api-local:
    server:
      port: 8080
      hostname: localhost
    database:
      engine: postgresql
      connectionString: postgresql://localhost:5432/my-app
  DataAPIMigrations:
    destFolder: ./migrations
    typescript: true
    local:
      region: ${self:provider.region}
      endpoint: http://localhost:8080
      maxRetries: 0
      secretArn: ${self:provider.environment.DATA_API_SECRET_ARN}
      resourceArn: ${self:provider.environment.DATA_API_RESOURCE_ARN}
      database: my-app   
      credentials:
        accessKeyId: example
        secretAccessKey: example     
    prod:
      region: ${self:provider.region}
      secretArn: ${self:provider.environment.DATA_API_SECRET_ARN}
      resourceArn: ${self:provider.environment.DATA_API_RESOURCE_ARN}
      database: ${self:provider.environment.DATABASE_NAME}
    
functions:
  todoIndex:
    handler: handler.todoIndex
    events:
      - http:
          path: todos
          method: get
  
  todoShow:
    handler: handler.todoShow
    events:
      - http:
          path: todos/{id}
          method: get
          request:
            parameters:
              paths:
                id: true