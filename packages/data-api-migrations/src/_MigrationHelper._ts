import * as RDSDataService from 'aws-sdk/clients/rdsdataservice'
import { TransactionHelper } from './TransactionHelper'
import { Migration } from './Migration'

export interface MigrationsHelperMethodConfig {
  database?: RDSDataService.DbName;
  resourceArn: RDSDataService.Arn;
  schema?: RDSDataService.DbName;
  secretArn: RDSDataService.Arn;
}

export type beginTransactionOptions = Omit<
  RDSDataService.BeginTransactionRequest,
  'secretArn' | 'resourceArn'
>
export type executeStatementOptions = Omit<
  RDSDataService.ExecuteStatementRequest,
  'secretArn' | 'resourceArn'
>
export type batchExecuteStatementOptions = Omit<
  RDSDataService.BatchExecuteStatementRequest,
  'secretArn' | 'resourceArn'
>

export class MigrationHelper {
  public readonly migration: Migration

  constructor (migration: Migration) {
    this.migration = migration
  }

  public async beginTransaction (
    options?: beginTransactionOptions
  ): Promise<TransactionHelper> {
    const { transactionId } = await this.migration.client.beginTransaction({
      ...this.migration.methodConfig,
      ...options
    }).promise()
    return new TransactionHelper(this, transactionId)
  }

  public async commitTransaction ({
    transactionId,
  }: {
    transactionId: string;
  }): Promise<void> {
    this.migration.logger('commitTransaction')
    await this.migration.client.commitTransaction({
      ...this.migration.methodConfig,
      transactionId
    }).promise()
  }

  public async rollbackTransaction ({
    transactionId
  }: {
    transactionId: string;
  }): Promise<void> {
    this.migration.logger('rollbackTransaction')
    await this.migration.client.rollbackTransaction({
      ...this.migration.methodConfig,
      transactionId
    }).promise()
  }

  public async executeStatement (
    options: executeStatementOptions
  ): Promise<RDSDataService.ExecuteStatementResponse> {
    const { sql } = options
    this.migration.logger(`executeStatement(${sql})`)
    return await this.migration.client.executeStatement({
      ...this.migration.methodConfig,
      ...options
    }).promise()
  }

  public async batchExecuteStatement (
    options: batchExecuteStatementOptions
  ): Promise<RDSDataService.BatchExecuteStatementResponse> {
    const { sql } = options
    this.migration.logger(`batchExecuteStatement(${sql})`)
    return await this.migration.client.batchExecuteStatement({
      ...this.migration.methodConfig,
      ...options
    }).promise()
  }
}